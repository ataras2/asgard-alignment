import argparse
import json
import zmq
import time

## apply a relative offset from a difference state file (generated by common/m_diff_instr_states.py)
def send_and_get_response(socket, message):
    print(f"Sending: {message}")
    socket.send_string(message)
    try:
        response = socket.recv_string(flags=zmq.NOBLOCK)
        print(f"Received: {response}")
    except zmq.Again:
        print("Timeout: No response received")


# not yet tested on real MDS..
def move_motors(diff_file, mds_host, mds_port):
    # Load difference file
    with open(diff_file) as f:
        delta_dict = json.load(f)

    print( f"we are applying the following relative movements:\n {delta_dict}")
    _ = input("\n proceed? escape program now if not.")
    # Set up ZMQ
    context = zmq.Context()
    mds_socket = context.socket(zmq.REQ)
    mds_socket.connect(f"tcp://{mds_host}:{mds_port}")
    mds_socket.RCVTIMEO = 5000  # 5 sec timeout

    # Send relative move commands
    for motor_name, delta in delta_dict.items():
        if not isinstance(delta, (int, float)):
            continue  # skip malformed entries
        command = f"moverel {motor_name} {delta:.6f}"
        send_and_get_response(mds_socket, command)
        time.sleep(0.2)  # Optional delay between moves



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Send ZMQ motor delta moves.")
    parser.add_argument("diff_file", help="JSON file with motor deltas")
    parser.add_argument("--mds_host", default="192.168.100.2", help="ZMQ MDS host")
    parser.add_argument("--mds_port", type=int, default=5555, help="ZMQ MDS port")
    args = parser.parse_args()

    move_motors(args.diff_file, args.mds_host, args.mds_port)